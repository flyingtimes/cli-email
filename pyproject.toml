[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "email-priority-manager"
version = "0.1.0"
description = "AI-powered email priority manager using BigModel.cn API"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Email Priority Manager Team", email = "team@example.com"}
]
maintainers = [
    {name = "Email Priority Manager Team", email = "team@example.com"}
]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Email",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["email", "priority", "ai", "bigmodel", "automation"]
dependencies = [
    "click>=8.0.0",
    "sqlalchemy>=1.4.0",
    "alembic>=1.7.0",
    "python-dotenv>=0.19.0",
    "pydantic>=1.8.0",
    "email-validator>=1.1.0",
    "cryptography>=3.4.0",
    "requests>=2.26.0",
    "aiofiles>=0.7.0",
    "structlog>=21.0.0",
    "beautifulsoup4>=4.9.0",
    "chardet>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "pytest-asyncio>=0.15.0",
    "black>=21.0.0",
    "isort>=5.9.0",
    "flake8>=3.9.0",
    "mypy>=0.910",
    "pre-commit>=2.15.0",
]
ai = [
    "openai>=0.27.0",
    "sentence-transformers>=2.2.0",
    "numpy>=1.21.0",
    "pandas>=1.3.0",
    "markdownify>=0.11.0",
]
test = [
    "pytest>=6.0.0",
    "pytest-cov>=2.12.0",
    "pytest-asyncio>=0.15.0",
    "pytest-mock>=3.6.0",
    "factory-boy>=3.2.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/email-priority-manager"
Documentation = "https://github.com/yourusername/email-priority-manager#readme"
Repository = "https://github.com/yourusername/email-priority-manager.git"
"Bug Tracker" = "https://github.com/yourusername/email-priority-manager/issues"

[project.scripts]
email-priority-manager = "email_priority_manager.cli.main:main"
epm = "email_priority_manager.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
email_priority_manager = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=email_priority_manager",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "-v",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/email_priority_manager"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/setup.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]